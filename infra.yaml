AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Complete infrastructure for i-educar/i-diario applications

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Project Settings"
        Parameters:
          - ProjectName
          - Environment
      - Label:
          default: "Application Settings"
        Parameters:
          - ApplicationInstanceType
          - ApplicationVolumeSize
      - Label:
          default: "Database Settings"
        Parameters:
          - DatabaseName
          - DatabaseUsername
          - PostgreSQLVersion
          - DatabaseInstanceType
          - DatabaseVolumeSize
      - Label:
          default: "SSL Settings"
        Parameters:
          - SSLCertificateArn
    ParameterLabels:
      ProjectName:
        default: "Project Name"
      Environment:
        default: "Environment"
      ApplicationInstanceType:
        default: "Application Instance Type"
      ApplicationVolumeSize:
        default: "Application Volume Size (GB)"
      DatabaseName:
        default: "Database Name"
      DatabaseUsername:
        default: "Database Username"
      PostgreSQLVersion:
        default: "PostgreSQL Version"
      DatabaseInstanceType:
        default: "Database Instance Type"
      DatabaseVolumeSize:
        default: "Database Volume Size (GB)"
      SSLCertificateArn:
        default: "SSL Certificate ARN"

Parameters:
  ProjectName:
    Type: String
    Default: i-educar
    AllowedValues:
      - i-educar
      - i-diario
    ConstraintDescription: 'Must be i-educar or i-diario'

  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - uat
      - prod
    ConstraintDescription: 'Must be dev, uat or prod'

  ApplicationInstanceType:
    Type: String
    Default: t4g.small
    AllowedValues:
      - t4g.small
      - t4g.medium
      - t4g.large
      - t4g.xlarge
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
    ConstraintDescription: 'Must be a valid instance type'

  ApplicationVolumeSize:
    Type: Number
    Default: 10
    MinValue: 10
    MaxValue: 1000
    ConstraintDescription: 'Must be between 10 and 1000 GB'

  DatabaseName:
    Type: String
    Default: semed_db
    MinLength: 3
    MaxLength: 32
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_]*"
    ConstraintDescription: 'Must start with a letter and contain only letters, numbers or underscore'

  DatabaseUsername:
    Type: String
    Default: semed_user
    MinLength: 3
    MaxLength: 32
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_]*"
    ConstraintDescription: 'Must start with a letter and contain only letters, numbers or underscore'

  PostgreSQLVersion:
    Type: String
    Default: '17'
    AllowedValues:
      - '16'
      - '17'
    ConstraintDescription: 'Must be 16 or 17'

  DatabaseInstanceType:
    Type: String
    Default: t4g.small
    AllowedValues:
      - t4g.small
      - t4g.medium
      - t4g.large
    ConstraintDescription: 'Must be a valid instance type'

  DatabaseVolumeSize:
    Type: Number
    Default: 10
    MinValue: 10
    MaxValue: 1000
    ConstraintDescription: 'Must be between 10 and 1000 GB'

  SSLCertificateArn:
    Type: String
    Default: ''
    AllowedPattern: '^(arn:aws:acm:[^:]+:[0-9]+:certificate/[a-zA-Z0-9-]+)?$'
    ConstraintDescription: 'Must be a valid ACM ARN or empty'

Conditions:
  IsApplicationArm64: !Or
    - !Equals [ !Ref ApplicationInstanceType, t4g.small ]
    - !Equals [ !Ref ApplicationInstanceType, t4g.medium ]
    - !Equals [ !Ref ApplicationInstanceType, t4g.large ]
    - !Equals [ !Ref ApplicationInstanceType, t4g.xlarge ]
  HasSSLCertificate: !Not [ !Equals [ !Ref SSLCertificateArn, '' ] ]
  NoSSLCertificate: !Equals [ !Ref SSLCertificateArn, '' ]

Resources:
  # ========================================
  # 1. NETWORK INFRASTRUCTURE
  # ========================================
  
  MainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-vpc
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  MainInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-igw
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  MainVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MainVPC
      InternetGatewayId: !Ref MainInternetGateway

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-nat-eip
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  MainNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnetAZ1
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-nat-gw
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Subnets PÃºblicas
  PublicSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-subnet-az1
        - Key: Type
          Value: Public
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  PublicSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-subnet-az2
        - Key: Type
          Value: Public
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Subnets Privadas
  PrivateSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-private-subnet-az1
        - Key: Type
          Value: Private
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  PrivateSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-private-subnet-az2
        - Key: Type
          Value: Private
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Routing Infrastructure
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-rt
        - Key: Type
          Value: Public
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-private-rt
        - Key: Type
          Value: Private
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: MainVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MainInternetGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MainNATGateway

  # Route Table Associations
  PublicSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAZ1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAZ2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetAZ1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetAZ2
      RouteTableId: !Ref PrivateRouteTable

  # ========================================
  # 2. IAM ROLES AND SECURITY
  # ========================================
  
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ec2/${ProjectName}-${Environment}-application"
      RetentionInDays: 14
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-app-logs"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
  
  DatabaseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ec2/${ProjectName}-${Environment}-database"
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-db-logs"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
  
  ApplicationInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${Environment}-ec2-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: !Sub "${ProjectName}-${Environment}-secrets-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !Ref DatabaseSecret
                  - !Ref S3AccessSecret
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                  - "logs:DescribeLogGroups"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeTags"
                Resource: "*"
              - Effect: Allow
                Action: "s3:*"
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ec2-role
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  ApplicationInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${ProjectName}-${Environment}-ec2-profile"
      Roles:
        - !Ref ApplicationInstanceRole

  # Security Groups
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ProjectName}-${Environment}-alb-sg"
      GroupDescription: 'Security group for Application Load Balancer - allows HTTP/HTTPS from internet'
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: 'HTTP access from internet'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: 'HTTPS access from internet'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: 'All outbound traffic'
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-alb-sg
        - Key: Type
          Value: LoadBalancer
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ProjectName}-${Environment}-app-sg"
      GroupDescription: 'Security group for application instances - allows traffic from ALB'
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: 'HTTP access from Load Balancer'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: 'All outbound traffic'
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-app-sg
        - Key: Type
          Value: Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ProjectName}-${Environment}-database-sg"
      GroupDescription: 'Security group for PostgreSQL database instance - allows access from application'
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup
          Description: 'PostgreSQL access from application instances'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: 'All outbound traffic'
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-database-sg
        - Key: Type
          Value: Database
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # 3. WEB APPLICATION FIREWALL AND LOAD BALANCER
  # ========================================
  
  WebApplicationFirewall:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-waf"
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub "${ProjectName}-${Environment}-waf-requests"
      Rules:
        - Name: AWSManagedCommonRuleSet
          Priority: 1
          OverrideAction:
            Count: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
              ExcludedRules:
                - Name: SizeRestrictions_BODY
                - Name: GenericRFI_BODY
                - Name: GenericRFI_QUERYARGUMENTS
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub "${ProjectName}-${Environment}-waf-common-rules"
        - Name: AWSManagedKnownBadInputsRuleSet
          Priority: 2
          OverrideAction:
            Count: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub "${ProjectName}-${Environment}-waf-bad-inputs"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-waf
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-alb
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnetAZ1
        - !Ref PublicSubnetAZ2
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: routing.http2.enabled
          Value: 'true'
        - Key: access_logs.s3.enabled
          Value: 'false'
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-alb
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  WAFAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Ref ApplicationLoadBalancer
      WebACLArn: !GetAtt WebApplicationFirewall.Arn

  ApplicationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-app-tg
      VpcId: !Ref MainVPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: '200,302,301'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '300'
        - Key: stickiness.enabled
          Value: 'false'
        - Key: load_balancing.algorithm.type
          Value: round_robin
      Targets:
        - Id: !Ref ApplicationInstance
          Port: 80
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-app-tg
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Load Balancer Listeners - Conditional creation based on SSL certificate

  HTTPListenerWithoutSSL:
    Condition: NoSSLCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationTargetGroup

  HTTPListenerWithSSL:
    Condition: HasSSLCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301

  HTTPSListener:
    Condition: HasSSLCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationTargetGroup

  # ========================================
  # 4. COMPUTE INSTANCES
  # ========================================
  
  ApplicationInstance:
    Type: AWS::EC2::Instance
    DependsOn:
      - DatabaseSecret
      - DatabaseInstance
      - S3AccessSecret
      - S3Bucket
    Properties:
      InstanceType: !Ref ApplicationInstanceType
      SecurityGroupIds:
        - !Ref ApplicationSecurityGroup
      SubnetId: !Ref PrivateSubnetAZ1
      IamInstanceProfile: !Ref ApplicationInstanceProfile
      ImageId: !If
        - IsApplicationArm64
        - '{{resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/arm64/hvm/ebs-gp2/ami-id}}'
        - '{{resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id}}'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref ApplicationVolumeSize
            VolumeType: gp2
            Encrypted: true
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-app
        - Key: Type
          Value: Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          exec > >(tee -a /var/log/user-data.log) 2>&1
          set -e
          echo "[UserData] Iniciando configuraÃ§Ã£o da instÃ¢ncia de aplicaÃ§Ã£o..."
          
          export AWS_REGION="${AWS::Region}"
          export DB_HOST="${DatabaseInstance.PrivateIp}"
          export DB_SECRET_ARN="${DatabaseSecret}"
          export S3_SECRET_ARN="${S3AccessSecret}"
          export DB_USERNAME="${DatabaseUsername}"
          export DB_NAME="${DatabaseName}"
          export ALB_DNS_NAME="${ApplicationLoadBalancer.DNSName}"

          if [[ "${ApplicationInstanceType}" == t4g* ]]; then
            export ARCH=arm64
          elif [[ "${ApplicationInstanceType}" == t3* ]]; then
            export ARCH=amd64
          fi
          
          echo "[UserData] Baixando scripts de instalaÃ§Ã£o..."
          mkdir -p /tmp/install-scripts
          cd /tmp/install-scripts
          wget "https://raw.githubusercontent.com/semed-bacabal/DevOps/main/scripts/setup-common.sh" -O setup-common.sh
          if [ "${ProjectName}" = "i-educar" ]; then
            wget "https://raw.githubusercontent.com/semed-bacabal/DevOps/main/scripts/install-i-educar.sh" -O install-app.sh
          elif [ "${ProjectName}" = "i-diario" ]; then
            wget "https://raw.githubusercontent.com/semed-bacabal/DevOps/main/scripts/install-i-diario.sh" -O install-app.sh
          fi
          chmod +x *.sh
          
          echo "[UserData] Executando instalaÃ§Ã£o da aplicaÃ§Ã£o ${ProjectName}..."
          ./install-app.sh
          
          echo "[UserData] Limpando arquivos temporÃ¡rios..."
          rm -rf /tmp/install-scripts
          
          echo "[UserData] ConfiguraÃ§Ã£o da instÃ¢ncia de aplicaÃ§Ã£o concluÃ­da!"

  # ========================================
  # 5. POSTGRESQL DATABASE INSTANCE
  # ========================================

  DatabaseInstance:
    Type: AWS::EC2::Instance
    DependsOn: DatabaseSecret
    Properties:
      InstanceType: !Ref DatabaseInstanceType
      SecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      SubnetId: !Ref PrivateSubnetAZ1
      ImageId: '{{resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/arm64/hvm/ebs-gp2/ami-id}}'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref DatabaseVolumeSize
            VolumeType: gp2
            Encrypted: true
            DeleteOnTermination: true
      IamInstanceProfile: !Ref ApplicationInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-database
        - Key: Type
          Value: Database
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            exec > >(tee -a /var/log/user-data.log) 2>&1
            set -e
            echo "[UserData] Iniciando configuraÃ§Ã£o da instÃ¢ncia de banco de dados..."
            
            export AWS_REGION="${AWS::Region}"
            export DB_SECRET_ARN="${DatabaseSecret}"
            export DB_USERNAME="${DatabaseUsername}"
            export DB_NAME="${DatabaseName}"

            echo "[UserData] Baixando script de instalaÃ§Ã£o do PostgreSQL..."
            mkdir -p /tmp/install-scripts
            cd /tmp/install-scripts
            wget "https://raw.githubusercontent.com/semed-bacabal/DevOps/main/scripts/install-postgresql.sh" -O install-postgresql.sh
            chmod +x install-postgresql.sh
            
            echo "[UserData] Executando instalaÃ§Ã£o do PostgreSQL..."
            ./install-postgresql.sh
            
            echo "[UserData] Limpando arquivos temporÃ¡rios..."
            rm -rf /tmp/install-scripts
            
            echo "[UserData] ConfiguraÃ§Ã£o da instÃ¢ncia de banco de dados concluÃ­da!"

  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-database-credentials"
      Description: "Auto-generated password for PostgreSQL database"
      GenerateSecretString:
        PasswordLength: 32
        ExcludeCharacters: '"@/\\`&$%*()[]{}!#^|;:,.<>?~=+ '
        ExcludePunctuation: true
        RequireEachIncludedType: false
        IncludeSpace: false
        SecretStringTemplate: !Sub '{"username": "${DatabaseUsername}"}'
        GenerateStringKey: 'password'
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-${Environment}-database-credentials"
      - Key: Environment
        Value: !Ref Environment
      - Key: Project
        Value: !Ref ProjectName

  # ========================================
  # 6. STORAGE INFRASTRUCTURE
  # ========================================

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-${Environment}-storage"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Id: TransitionToIA
            Status: Enabled
            Transition:
              TransitionInDays: 30
              StorageClass: STANDARD_IA
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-storage
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  S3AccessUser:
    Type: AWS::IAM::User
    DependsOn: S3Bucket
    Properties:
      UserName: !Sub "${ProjectName}-${Environment}-s3-access-user"
      Policies:
        - PolicyName: !Sub "${ProjectName}-${Environment}-s3-full-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                  - "s3:GetObjectVersion"
                  - "s3:DeleteObjectVersion"
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetBucketLocation"
                  - "s3:GetBucketVersioning"
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-s3-user
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  S3AccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref S3AccessUser

  S3AccessSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-s3-credentials"
      Description: "Credentials to access the application's S3 bucket"
      SecretString: !Sub |
        {
          "AWS_BUCKET": "${S3Bucket}",
          "AWS_DEFAULT_REGION": "${AWS::Region}",
          "AWS_ACCESS_KEY_ID": "${S3AccessKey}",
          "AWS_SECRET_ACCESS_KEY": "${S3AccessKey.SecretAccessKey}"
        }
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-s3-credentials"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

Outputs:
  LoadBalancerURL:
    Description: "Public URL of the Application Load Balancer"
    Value: !If
      - HasSSLCertificate
      - !Sub "https://${ApplicationLoadBalancer.DNSName}"
      - !Sub "http://${ApplicationLoadBalancer.DNSName}"

  ApplicationInstanceId:
    Description: "Application EC2 instance ID"
    Value: !Ref ApplicationInstance

  ApplicationInstancePrivateIP:
    Description: "Private IP of the application instance"
    Value: !GetAtt ApplicationInstance.PrivateIp

  DatabaseInstanceId:
    Description: "PostgreSQL database EC2 instance ID"
    Value: !Ref DatabaseInstance

  DatabaseEndpoint:
    Description: "PostgreSQL database private IP address"
    Value: !GetAtt DatabaseInstance.PrivateIp

  S3BucketName:
    Description: "S3 bucket name for application storage"
    Value: !Ref S3Bucket
